/*
 *     This file is part of Lawnchair Launcher.
 *
 *     Lawnchair Launcher is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     Lawnchair Launcher is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with Lawnchair Launcher.  If not, see <https://www.gnu.org/licenses/>.
 */

/*
 *     This file is part of Lawnchair Launcher.
 *
 *     Lawnchair Launcher is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     Lawnchair Launcher is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with Lawnchair Launcher.  If not, see <https://www.gnu.org/licenses/>.
 */

import smali.SmaliTask

dependencies {
    lawnchairCompileOnly fileTree(dir: 'build/lawnchairlibs', include: '*.jar')
}

task 'buildLawnchairSmali' {
    def smaliInputDir = file('lawnchair/smali')
    def dexOutputDir = file('build/lawnchairsmali')
    def jarOutputDir = file('build/lawnchairlibs')

    smaliInputDir.mkdirs()
    dexOutputDir.mkdirs()
    jarOutputDir.mkdirs()

    def smaliFiles = fileTree(dir: smaliInputDir, include: '**/*.smali')
    if (!smaliFiles.empty) {
        def name = "lawnchair"

        def intermediateFile = dexOutputDir.toPath().resolve("${name}.dex").toFile()
        def jarFile = jarOutputDir.toPath().resolve("${name}.jar").toFile()
        def errorFile = jarOutputDir.toPath().resolve("${name}-error.zip").toFile()

        dependsOn "dex_to_jar_${name}"
        task "smali_to_dex_${name}"(type: SmaliTask) {
            source = smaliFiles
            destination = intermediateFile
        }
        task "dex_to_jar_${name}"(type: JavaExec) {
            dependsOn "smali_to_dex_${name}"
            classpath = fileTree(dir: file('buildSrc/dex2jar'), include: '*.jar')
            main = "com.googlecode.dex2jar.tools.Dex2jarCmd"
            args = [
                    intermediateFile,
                    "--output", jarFile,
                    "--exception-file", errorFile,
                    "--not-handle-exception",
                    "--force"
            ]

            // Up-to-date checks
            inputs.file intermediateFile
            outputs.file jarFile
        }
    }
}

def copySmaliLibDex(dirName, fileName) {
    def libDex = 'build/lawnchairsmali/lawnchair.dex'
    println "copy $libDex into $dirName"
    exec {
        workingDir '.'
        println("\$ mkdir -p ${dirName}");
        commandLine 'mkdir', '-p', dirName
    }
    exec {
        workingDir '.'
        println("\$ cp ${libDex} ${dirName}/${fileName}");
        commandLine 'cp', libDex, dirName + "/" + fileName
    }
}


static String dashSeparated(String s) {
    return s.replaceAll(/\B[A-Z]/) { '-' + it }.toLowerCase()
}

tasks.whenTaskAdded { task ->
    def name = task.name
    if (name.startsWith('pre') && name.contains('Lawnchair') && name.endsWith('Build')) {
        task.dependsOn 'buildLawnchairSmali'
    } else if (task.name.startsWith('mergeLibDex')) {
        def variantName = String.valueOf(name.substring('mergeExtDex'.length()).charAt(0)).uncapitalize() + name.substring('mergeLibDex'.length() + 1)
        task.dependsOn("mergeExtDex${variantName.substring(0, 1).capitalize() + variantName.substring(1)}")
    } else if (name.startsWith('mergeExtDex') && !name.endsWith('Test')) {
        task.doLast {
            def variantName = String.valueOf(name.substring('mergeExtDex'.length()).charAt(0)).uncapitalize() + name.substring('mergeExtDex'.length() + 1)
            def split = dashSeparated(variantName).split('-')
            def buildType = split[split.length - 1]
            int classNo = 1;
            File classOutFolder = new File("./build/intermediates/dex/${variantName + buildType.substring(0, 1).capitalize() + buildType.substring(1)}/mergeLibDex${String.valueOf(variantName.charAt(0)).capitalize() + variantName.substring(1) + buildType.substring(0, 1).capitalize() + buildType.substring(1)}/out/");
            if (!classOutFolder.exists()) {
                classOutFolder.mkdirs();
            }
            variantName = variantName.substring(0, variantName.length() - buildType.length())
            copySmaliLibDex("./build/intermediates/dex/${variantName + buildType.substring(0, 1).capitalize() + buildType.substring(1)}/mergeLibDex${String.valueOf(variantName.charAt(0)).capitalize() + variantName.substring(1) + buildType.substring(0, 1).capitalize() + buildType.substring(1)}/out/", "classes${classNo == 0 ? "" : "_" + String.valueOf(classNo)}.dex")
        }
    } else if (name.startsWith('transformClassesAndResourcesWithR8For') && !name.endsWith('Test')) {
        /*
         * TODO: Probably broken
         */
        def variantName = name.substring(37)
        def split = dashSeparated(variantName).split('-')
        def buildType = split[split.length - 1]
        variantName = variantName.substring(0, variantName.length() - buildType.length())
        def dirName = "./build/intermediates/transforms/r8/${variantName}/${buildType}/0/"
        task.doLast {
            copySmaliLibDex(dirName)
        }
    }
}
