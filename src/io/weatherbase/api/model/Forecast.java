/*
 *     Copyright (c) 2017-2019 the Lawnchair team
 *     Copyright (c)  2019 oldosfan (would)
 *     This file is part of Lawnchair Launcher.
 *
 *     Lawnchair Launcher is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     Lawnchair Launcher is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with Lawnchair Launcher.  If not, see <https://www.gnu.org/licenses/>.
 */

/*
 * Weatherbit.io - Swagger UI Weather API documentation
 * This is the documentation for the Weatherbit Weather API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 5 day forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/3hourly?city=London`&`country=UK`. See our [Weather API description page](https://www.weatherbit.io/api) for additional documentation.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.weatherbase.api.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import io.weatherbase.api.model.CurrentObs.Weather;
import java.math.BigDecimal;
import java.util.Objects;
/**
 * Forecast
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-07-23T18:38:21.490044+08:00[Asia/Shanghai]")
public class Forecast {
  @SerializedName("ts")
  private BigDecimal ts = null;

  @SerializedName("timestamp_local")
  private String timestampLocal = null;

  @SerializedName("timestamp_utc")
  private String timestampUtc = null;

  @SerializedName("datetime")
  private String datetime = null;

  @SerializedName("snow")
  private BigDecimal snow = null;

  @SerializedName("snow_depth")
  private BigDecimal snowDepth = null;

  @SerializedName("precip")
  private BigDecimal precip = null;

  @SerializedName("temp")
  private BigDecimal temp = null;

  @SerializedName("dewpt")
  private BigDecimal dewpt = null;

  @SerializedName("max_temp")
  private BigDecimal maxTemp = null;

  @SerializedName("min_temp")
  private BigDecimal minTemp = null;

  @SerializedName("app_max_temp")
  private BigDecimal appMaxTemp = null;

  @SerializedName("app_min_temp")
  private BigDecimal appMinTemp = null;

  @SerializedName("rh")
  private Integer rh = null;

  @SerializedName("clouds")
  private Integer clouds = null;

  @SerializedName("weather")
  private Weather weather = null;

  @SerializedName("slp")
  private BigDecimal slp = null;

  @SerializedName("pres")
  private BigDecimal pres = null;

  @SerializedName("uv")
  private BigDecimal uv = null;

  @SerializedName("max_dhi")
  private BigDecimal maxDhi = null;

  @SerializedName("vis")
  private BigDecimal vis = null;

  @SerializedName("pop")
  private BigDecimal pop = null;

  @SerializedName("moon_phase")
  private BigDecimal moonPhase = null;

  @SerializedName("sunrise_ts")
  private Integer sunriseTs = null;

  @SerializedName("sunset_ts")
  private Integer sunsetTs = null;

  @SerializedName("moonrise_ts")
  private Integer moonriseTs = null;

  @SerializedName("moonset_ts")
  private Integer moonsetTs = null;

  @SerializedName("pod")
  private String pod = null;

  @SerializedName("wind_spd")
  private BigDecimal windSpd = null;

  @SerializedName("wind_dir")
  private Integer windDir = null;

  @SerializedName("wind_cdir")
  private String windCdir = null;

  @SerializedName("wind_cdir_full")
  private String windCdirFull = null;

  public Forecast ts(BigDecimal ts) {
    this.ts = ts;
    return this;
  }

   /**
   * Unix Timestamp
   * @return ts
  **/
  @Schema(example = "1.5517188E+9", description = "Unix Timestamp")
  public BigDecimal getTs() {
    return ts;
  }

  public void setTs(BigDecimal ts) {
    this.ts = ts;
  }

  public Forecast timestampLocal(String timestampLocal) {
    this.timestampLocal = timestampLocal;
    return this;
  }

   /**
   * Timestamp in local time
   * @return timestampLocal
  **/
  @Schema(example = "2019-03-04T12:00:00", description = "Timestamp in local time")
  public String getTimestampLocal() {
    return timestampLocal;
  }

  public void setTimestampLocal(String timestampLocal) {
    this.timestampLocal = timestampLocal;
  }

  public Forecast timestampUtc(String timestampUtc) {
    this.timestampUtc = timestampUtc;
    return this;
  }

   /**
   * Timestamp UTC
   * @return timestampUtc
  **/
  @Schema(example = "2019-03-04T17:00:00", description = "Timestamp UTC")
  public String getTimestampUtc() {
    return timestampUtc;
  }

  public void setTimestampUtc(String timestampUtc) {
    this.timestampUtc = timestampUtc;
  }

  public Forecast datetime(String datetime) {
    this.datetime = datetime;
    return this;
  }

   /**
   * Date in format \&quot;YYYY-MM-DD:HH\&quot;. All datetime is in (UTC)
   * @return datetime
  **/
  @Schema(example = "2019-03-04:17", description = "Date in format \"YYYY-MM-DD:HH\". All datetime is in (UTC)")
  public String getDatetime() {
    return datetime;
  }

  public void setDatetime(String datetime) {
    this.datetime = datetime;
  }

  public Forecast snow(BigDecimal snow) {
    this.snow = snow;
    return this;
  }

   /**
   * Accumulated snowfall since last forecast point - default (mm)
   * @return snow
  **/
  @Schema(example = "10.45", description = "Accumulated snowfall since last forecast point - default (mm)")
  public BigDecimal getSnow() {
    return snow;
  }

  public void setSnow(BigDecimal snow) {
    this.snow = snow;
  }

  public Forecast snowDepth(BigDecimal snowDepth) {
    this.snowDepth = snowDepth;
    return this;
  }

   /**
   * Snow Depth - default (mm)
   * @return snowDepth
  **/
  @Schema(example = "45.0", description = "Snow Depth - default (mm)")
  public BigDecimal getSnowDepth() {
    return snowDepth;
  }

  public void setSnowDepth(BigDecimal snowDepth) {
    this.snowDepth = snowDepth;
  }

  public Forecast precip(BigDecimal precip) {
    this.precip = precip;
    return this;
  }

   /**
   * Accumulated precipitation since last forecast point - default (mm)
   * @return precip
  **/
  @Schema(example = "1.1", description = "Accumulated precipitation since last forecast point - default (mm)")
  public BigDecimal getPrecip() {
    return precip;
  }

  public void setPrecip(BigDecimal precip) {
    this.precip = precip;
  }

  public Forecast temp(BigDecimal temp) {
    this.temp = temp;
    return this;
  }

   /**
   * Temperature (Average) - default (C)
   * @return temp
  **/
  @Schema(example = "1.0", description = "Temperature (Average) - default (C)")
  public BigDecimal getTemp() {
    return temp;
  }

  public void setTemp(BigDecimal temp) {
    this.temp = temp;
  }

  public Forecast dewpt(BigDecimal dewpt) {
    this.dewpt = dewpt;
    return this;
  }

   /**
   * Dewpoint (Average) - default (C)
   * @return dewpt
  **/
  @Schema(example = "1.0", description = "Dewpoint (Average) - default (C)")
  public BigDecimal getDewpt() {
    return dewpt;
  }

  public void setDewpt(BigDecimal dewpt) {
    this.dewpt = dewpt;
  }

  public Forecast maxTemp(BigDecimal maxTemp) {
    this.maxTemp = maxTemp;
    return this;
  }

   /**
   * Maximum daily Temperature - default (C)
   * @return maxTemp
  **/
  @Schema(example = "1.5", description = "Maximum daily Temperature - default (C)")
  public BigDecimal getMaxTemp() {
    return maxTemp;
  }

  public void setMaxTemp(BigDecimal maxTemp) {
    this.maxTemp = maxTemp;
  }

  public Forecast minTemp(BigDecimal minTemp) {
    this.minTemp = minTemp;
    return this;
  }

   /**
   * Minimum daily Temperature - default (C)
   * @return minTemp
  **/
  @Schema(example = "-1.23", description = "Minimum daily Temperature - default (C)")
  public BigDecimal getMinTemp() {
    return minTemp;
  }

  public void setMinTemp(BigDecimal minTemp) {
    this.minTemp = minTemp;
  }

  public Forecast appMaxTemp(BigDecimal appMaxTemp) {
    this.appMaxTemp = appMaxTemp;
    return this;
  }

   /**
   * Apparent Maximum daily Temperature - default (C)
   * @return appMaxTemp
  **/
  @Schema(example = "4.0", description = "Apparent Maximum daily Temperature - default (C)")
  public BigDecimal getAppMaxTemp() {
    return appMaxTemp;
  }

  public void setAppMaxTemp(BigDecimal appMaxTemp) {
    this.appMaxTemp = appMaxTemp;
  }

  public Forecast appMinTemp(BigDecimal appMinTemp) {
    this.appMinTemp = appMinTemp;
    return this;
  }

   /**
   * Apparent Minimum daily Temperature - default (C)
   * @return appMinTemp
  **/
  @Schema(example = "-2.0", description = "Apparent Minimum daily Temperature - default (C)")
  public BigDecimal getAppMinTemp() {
    return appMinTemp;
  }

  public void setAppMinTemp(BigDecimal appMinTemp) {
    this.appMinTemp = appMinTemp;
  }

  public Forecast rh(Integer rh) {
    this.rh = rh;
    return this;
  }

   /**
   * Relative Humidity as a percentage (%)
   * @return rh
  **/
  @Schema(example = "95", description = "Relative Humidity as a percentage (%)")
  public Integer getRh() {
    return rh;
  }

  public void setRh(Integer rh) {
    this.rh = rh;
  }

  public Forecast clouds(Integer clouds) {
    this.clouds = clouds;
    return this;
  }

   /**
   * Cloud cover as a percentage (%)
   * @return clouds
  **/
  @Schema(example = "100", description = "Cloud cover as a percentage (%)")
  public Integer getClouds() {
    return clouds;
  }

  public void setClouds(Integer clouds) {
    this.clouds = clouds;
  }

  public Forecast weather(Weather weather) {
    this.weather = weather;
    return this;
  }

   /**
   * Get weather
   * @return weather
  **/
  @Schema(description = "")
  public Weather getWeather() {
    return weather;
  }

  public void setWeather(Weather weather) {
    this.weather = weather;
  }

  public Forecast slp(BigDecimal slp) {
    this.slp = slp;
    return this;
  }

   /**
   * Mean Sea level pressure (mb)
   * @return slp
  **/
  @Schema(example = "1012.89", description = "Mean Sea level pressure (mb)")
  public BigDecimal getSlp() {
    return slp;
  }

  public void setSlp(BigDecimal slp) {
    this.slp = slp;
  }

  public Forecast pres(BigDecimal pres) {
    this.pres = pres;
    return this;
  }

   /**
   * Pressure (mb)
   * @return pres
  **/
  @Schema(example = "1005.0", description = "Pressure (mb)")
  public BigDecimal getPres() {
    return pres;
  }

  public void setPres(BigDecimal pres) {
    this.pres = pres;
  }

  public Forecast uv(BigDecimal uv) {
    this.uv = uv;
    return this;
  }

   /**
   * UV Index
   * @return uv
  **/
  @Schema(example = "6.5", description = "UV Index")
  public BigDecimal getUv() {
    return uv;
  }

  public void setUv(BigDecimal uv) {
    this.uv = uv;
  }

  public Forecast maxDhi(BigDecimal maxDhi) {
    this.maxDhi = maxDhi;
    return this;
  }

   /**
   * [Deprecated] Max direct component of solar insolation (W/m^2)
   * @return maxDhi
  **/
  @Schema(example = "655.0", description = "[Deprecated] Max direct component of solar insolation (W/m^2)")
  public BigDecimal getMaxDhi() {
    return maxDhi;
  }

  public void setMaxDhi(BigDecimal maxDhi) {
    this.maxDhi = maxDhi;
  }

  public Forecast vis(BigDecimal vis) {
    this.vis = vis;
    return this;
  }

   /**
   * Average Visibility default (KM)
   * @return vis
  **/
  @Schema(example = "3.0", description = "Average Visibility default (KM)")
  public BigDecimal getVis() {
    return vis;
  }

  public void setVis(BigDecimal vis) {
    this.vis = vis;
  }

  public Forecast pop(BigDecimal pop) {
    this.pop = pop;
    return this;
  }

   /**
   * Chance of Precipitation as a percentage (%)
   * @return pop
  **/
  @Schema(example = "75.0", description = "Chance of Precipitation as a percentage (%)")
  public BigDecimal getPop() {
    return pop;
  }

  public void setPop(BigDecimal pop) {
    this.pop = pop;
  }

  public Forecast moonPhase(BigDecimal moonPhase) {
    this.moonPhase = moonPhase;
    return this;
  }

   /**
   * Moon phase
   * @return moonPhase
  **/
  @Schema(example = "0.87", description = "Moon phase")
  public BigDecimal getMoonPhase() {
    return moonPhase;
  }

  public void setMoonPhase(BigDecimal moonPhase) {
    this.moonPhase = moonPhase;
  }

  public Forecast sunriseTs(Integer sunriseTs) {
    this.sunriseTs = sunriseTs;
    return this;
  }

   /**
   * Sunrise unix timestamp
   * @return sunriseTs
  **/
  @Schema(example = "1530331260", description = "Sunrise unix timestamp")
  public Integer getSunriseTs() {
    return sunriseTs;
  }

  public void setSunriseTs(Integer sunriseTs) {
    this.sunriseTs = sunriseTs;
  }

  public Forecast sunsetTs(Integer sunsetTs) {
    this.sunsetTs = sunsetTs;
    return this;
  }

   /**
   * Sunset unix timestamp
   * @return sunsetTs
  **/
  @Schema(example = "1530331260", description = "Sunset unix timestamp")
  public Integer getSunsetTs() {
    return sunsetTs;
  }

  public void setSunsetTs(Integer sunsetTs) {
    this.sunsetTs = sunsetTs;
  }

  public Forecast moonriseTs(Integer moonriseTs) {
    this.moonriseTs = moonriseTs;
    return this;
  }

   /**
   * Moonrise unix timestamp
   * @return moonriseTs
  **/
  @Schema(example = "1530331260", description = "Moonrise unix timestamp")
  public Integer getMoonriseTs() {
    return moonriseTs;
  }

  public void setMoonriseTs(Integer moonriseTs) {
    this.moonriseTs = moonriseTs;
  }

  public Forecast moonsetTs(Integer moonsetTs) {
    this.moonsetTs = moonsetTs;
    return this;
  }

   /**
   * Moonset unix timestamp
   * @return moonsetTs
  **/
  @Schema(example = "1530331260", description = "Moonset unix timestamp")
  public Integer getMoonsetTs() {
    return moonsetTs;
  }

  public void setMoonsetTs(Integer moonsetTs) {
    this.moonsetTs = moonsetTs;
  }

  public Forecast pod(String pod) {
    this.pod = pod;
    return this;
  }

   /**
   * Part of the day (d &#x3D; day, n &#x3D; night)
   * @return pod
  **/
  @Schema(example = "n", description = "Part of the day (d = day, n = night)")
  public String getPod() {
    return pod;
  }

  public void setPod(String pod) {
    this.pod = pod;
  }

  public Forecast windSpd(BigDecimal windSpd) {
    this.windSpd = windSpd;
    return this;
  }

   /**
   * Wind Speed (default m/s)
   * @return windSpd
  **/
  @Schema(example = "13.85", description = "Wind Speed (default m/s)")
  public BigDecimal getWindSpd() {
    return windSpd;
  }

  public void setWindSpd(BigDecimal windSpd) {
    this.windSpd = windSpd;
  }

  public Forecast windDir(Integer windDir) {
    this.windDir = windDir;
    return this;
  }

   /**
   * Wind direction
   * @return windDir
  **/
  @Schema(example = "105", description = "Wind direction")
  public Integer getWindDir() {
    return windDir;
  }

  public void setWindDir(Integer windDir) {
    this.windDir = windDir;
  }

  public Forecast windCdir(String windCdir) {
    this.windCdir = windCdir;
    return this;
  }

   /**
   * Cardinal wind direction
   * @return windCdir
  **/
  @Schema(example = "ENE", description = "Cardinal wind direction")
  public String getWindCdir() {
    return windCdir;
  }

  public void setWindCdir(String windCdir) {
    this.windCdir = windCdir;
  }

  public Forecast windCdirFull(String windCdirFull) {
    this.windCdirFull = windCdirFull;
    return this;
  }

   /**
   * Cardinal wind direction (text)
   * @return windCdirFull
  **/
  @Schema(example = "East-North-East", description = "Cardinal wind direction (text)")
  public String getWindCdirFull() {
    return windCdirFull;
  }

  public void setWindCdirFull(String windCdirFull) {
    this.windCdirFull = windCdirFull;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Forecast forecast = (Forecast) o;
    return Objects.equals(this.ts, forecast.ts) &&
        Objects.equals(this.timestampLocal, forecast.timestampLocal) &&
        Objects.equals(this.timestampUtc, forecast.timestampUtc) &&
        Objects.equals(this.datetime, forecast.datetime) &&
        Objects.equals(this.snow, forecast.snow) &&
        Objects.equals(this.snowDepth, forecast.snowDepth) &&
        Objects.equals(this.precip, forecast.precip) &&
        Objects.equals(this.temp, forecast.temp) &&
        Objects.equals(this.dewpt, forecast.dewpt) &&
        Objects.equals(this.maxTemp, forecast.maxTemp) &&
        Objects.equals(this.minTemp, forecast.minTemp) &&
        Objects.equals(this.appMaxTemp, forecast.appMaxTemp) &&
        Objects.equals(this.appMinTemp, forecast.appMinTemp) &&
        Objects.equals(this.rh, forecast.rh) &&
        Objects.equals(this.clouds, forecast.clouds) &&
        Objects.equals(this.weather, forecast.weather) &&
        Objects.equals(this.slp, forecast.slp) &&
        Objects.equals(this.pres, forecast.pres) &&
        Objects.equals(this.uv, forecast.uv) &&
        Objects.equals(this.maxDhi, forecast.maxDhi) &&
        Objects.equals(this.vis, forecast.vis) &&
        Objects.equals(this.pop, forecast.pop) &&
        Objects.equals(this.moonPhase, forecast.moonPhase) &&
        Objects.equals(this.sunriseTs, forecast.sunriseTs) &&
        Objects.equals(this.sunsetTs, forecast.sunsetTs) &&
        Objects.equals(this.moonriseTs, forecast.moonriseTs) &&
        Objects.equals(this.moonsetTs, forecast.moonsetTs) &&
        Objects.equals(this.pod, forecast.pod) &&
        Objects.equals(this.windSpd, forecast.windSpd) &&
        Objects.equals(this.windDir, forecast.windDir) &&
        Objects.equals(this.windCdir, forecast.windCdir) &&
        Objects.equals(this.windCdirFull, forecast.windCdirFull);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ts, timestampLocal, timestampUtc, datetime, snow, snowDepth, precip, temp, dewpt, maxTemp, minTemp, appMaxTemp, appMinTemp, rh, clouds, weather, slp, pres, uv, maxDhi, vis, pop, moonPhase, sunriseTs, sunsetTs, moonriseTs, moonsetTs, pod, windSpd, windDir, windCdir, windCdirFull);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Forecast {\n");
    
    sb.append("    ts: ").append(toIndentedString(ts)).append("\n");
    sb.append("    timestampLocal: ").append(toIndentedString(timestampLocal)).append("\n");
    sb.append("    timestampUtc: ").append(toIndentedString(timestampUtc)).append("\n");
    sb.append("    datetime: ").append(toIndentedString(datetime)).append("\n");
    sb.append("    snow: ").append(toIndentedString(snow)).append("\n");
    sb.append("    snowDepth: ").append(toIndentedString(snowDepth)).append("\n");
    sb.append("    precip: ").append(toIndentedString(precip)).append("\n");
    sb.append("    temp: ").append(toIndentedString(temp)).append("\n");
    sb.append("    dewpt: ").append(toIndentedString(dewpt)).append("\n");
    sb.append("    maxTemp: ").append(toIndentedString(maxTemp)).append("\n");
    sb.append("    minTemp: ").append(toIndentedString(minTemp)).append("\n");
    sb.append("    appMaxTemp: ").append(toIndentedString(appMaxTemp)).append("\n");
    sb.append("    appMinTemp: ").append(toIndentedString(appMinTemp)).append("\n");
    sb.append("    rh: ").append(toIndentedString(rh)).append("\n");
    sb.append("    clouds: ").append(toIndentedString(clouds)).append("\n");
    sb.append("    weather: ").append(toIndentedString(weather)).append("\n");
    sb.append("    slp: ").append(toIndentedString(slp)).append("\n");
    sb.append("    pres: ").append(toIndentedString(pres)).append("\n");
    sb.append("    uv: ").append(toIndentedString(uv)).append("\n");
    sb.append("    maxDhi: ").append(toIndentedString(maxDhi)).append("\n");
    sb.append("    vis: ").append(toIndentedString(vis)).append("\n");
    sb.append("    pop: ").append(toIndentedString(pop)).append("\n");
    sb.append("    moonPhase: ").append(toIndentedString(moonPhase)).append("\n");
    sb.append("    sunriseTs: ").append(toIndentedString(sunriseTs)).append("\n");
    sb.append("    sunsetTs: ").append(toIndentedString(sunsetTs)).append("\n");
    sb.append("    moonriseTs: ").append(toIndentedString(moonriseTs)).append("\n");
    sb.append("    moonsetTs: ").append(toIndentedString(moonsetTs)).append("\n");
    sb.append("    pod: ").append(toIndentedString(pod)).append("\n");
    sb.append("    windSpd: ").append(toIndentedString(windSpd)).append("\n");
    sb.append("    windDir: ").append(toIndentedString(windDir)).append("\n");
    sb.append("    windCdir: ").append(toIndentedString(windCdir)).append("\n");
    sb.append("    windCdirFull: ").append(toIndentedString(windCdirFull)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
