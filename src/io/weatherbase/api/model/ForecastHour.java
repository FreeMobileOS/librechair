/*
 *     Copyright (c) 2017-2019 the Lawnchair team
 *     Copyright (c)  2019 oldosfan (would)
 *     This file is part of Lawnchair Launcher.
 *
 *     Lawnchair Launcher is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     Lawnchair Launcher is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with Lawnchair Launcher.  If not, see <https://www.gnu.org/licenses/>.
 */

/*
 * Weatherbit.io - Swagger UI Weather API documentation
 * This is the documentation for the Weatherbit Weather API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 5 day forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/3hourly?city=London`&`country=UK`. See our [Weather API description page](https://www.weatherbit.io/api) for additional documentation.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.weatherbase.api.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import io.weatherbase.api.model.CurrentObs.Weather;
import java.math.BigDecimal;
import java.util.Objects;
/**
 * ForecastHour
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-07-23T18:38:21.490044+08:00[Asia/Shanghai]")
public class ForecastHour {
  @SerializedName("ts")
  private BigDecimal ts = null;

  @SerializedName("timestamp_local")
  private String timestampLocal = null;

  @SerializedName("timestamp_utc")
  private String timestampUtc = null;

  @SerializedName("datetime")
  private String datetime = null;

  @SerializedName("snow")
  private BigDecimal snow = null;

  @SerializedName("snow_depth")
  private BigDecimal snowDepth = null;

  @SerializedName("snow6h")
  private BigDecimal snow6h = null;

  @SerializedName("precip")
  private BigDecimal precip = null;

  @SerializedName("temp")
  private BigDecimal temp = null;

  @SerializedName("dewpt")
  private BigDecimal dewpt = null;

  @SerializedName("app_temp")
  private BigDecimal appTemp = null;

  @SerializedName("rh")
  private Integer rh = null;

  @SerializedName("clouds")
  private Integer clouds = null;

  @SerializedName("weather")
  private Weather weather = null;

  @SerializedName("slp")
  private BigDecimal slp = null;

  @SerializedName("pres")
  private BigDecimal pres = null;

  @SerializedName("uv")
  private BigDecimal uv = null;

  @SerializedName("solar_rad")
  private BigDecimal solarRad = null;

  @SerializedName("ghi")
  private BigDecimal ghi = null;

  @SerializedName("dhi")
  private BigDecimal dhi = null;

  @SerializedName("dni")
  private BigDecimal dni = null;

  @SerializedName("vis")
  private BigDecimal vis = null;

  @SerializedName("pod")
  private String pod = null;

  @SerializedName("pop")
  private BigDecimal pop = null;

  @SerializedName("wind_spd")
  private BigDecimal windSpd = null;

  @SerializedName("wind_dir")
  private Integer windDir = null;

  @SerializedName("wind_cdir")
  private String windCdir = null;

  @SerializedName("wind_cdir_full")
  private String windCdirFull = null;

  public ForecastHour ts(BigDecimal ts) {
    this.ts = ts;
    return this;
  }

   /**
   * Unix Timestamp
   * @return ts
  **/
  @Schema(example = "1.5517188E+9", description = "Unix Timestamp")
  public BigDecimal getTs() {
    return ts;
  }

  public void setTs(BigDecimal ts) {
    this.ts = ts;
  }

  public ForecastHour timestampLocal(String timestampLocal) {
    this.timestampLocal = timestampLocal;
    return this;
  }

   /**
   * Timestamp in local time
   * @return timestampLocal
  **/
  @Schema(example = "2019-03-04T12:00:00", description = "Timestamp in local time")
  public String getTimestampLocal() {
    return timestampLocal;
  }

  public void setTimestampLocal(String timestampLocal) {
    this.timestampLocal = timestampLocal;
  }

  public ForecastHour timestampUtc(String timestampUtc) {
    this.timestampUtc = timestampUtc;
    return this;
  }

   /**
   * Timestamp UTC
   * @return timestampUtc
  **/
  @Schema(example = "2019-03-04T17:00:00", description = "Timestamp UTC")
  public String getTimestampUtc() {
    return timestampUtc;
  }

  public void setTimestampUtc(String timestampUtc) {
    this.timestampUtc = timestampUtc;
  }

  public ForecastHour datetime(String datetime) {
    this.datetime = datetime;
    return this;
  }

   /**
   * Date in format \&quot;YYYY-MM-DD:HH\&quot;. All datetime is in (UTC)
   * @return datetime
  **/
  @Schema(example = "2019-03-04:17", description = "Date in format \"YYYY-MM-DD:HH\". All datetime is in (UTC)")
  public String getDatetime() {
    return datetime;
  }

  public void setDatetime(String datetime) {
    this.datetime = datetime;
  }

  public ForecastHour snow(BigDecimal snow) {
    this.snow = snow;
    return this;
  }

   /**
   * Accumulated snowfall since last forecast point - Default (mm)
   * @return snow
  **/
  @Schema(example = "10.45", description = "Accumulated snowfall since last forecast point - Default (mm)")
  public BigDecimal getSnow() {
    return snow;
  }

  public void setSnow(BigDecimal snow) {
    this.snow = snow;
  }

  public ForecastHour snowDepth(BigDecimal snowDepth) {
    this.snowDepth = snowDepth;
    return this;
  }

   /**
   * Snow depth - Default (mm)
   * @return snowDepth
  **/
  @Schema(example = "45.0", description = "Snow depth - Default (mm)")
  public BigDecimal getSnowDepth() {
    return snowDepth;
  }

  public void setSnowDepth(BigDecimal snowDepth) {
    this.snowDepth = snowDepth;
  }

  public ForecastHour snow6h(BigDecimal snow6h) {
    this.snow6h = snow6h;
    return this;
  }

   /**
   * 6 hour accumulated snowfall. Default (mm)
   * @return snow6h
  **/
  @Schema(example = "140.87", description = "6 hour accumulated snowfall. Default (mm)")
  public BigDecimal getSnow6h() {
    return snow6h;
  }

  public void setSnow6h(BigDecimal snow6h) {
    this.snow6h = snow6h;
  }

  public ForecastHour precip(BigDecimal precip) {
    this.precip = precip;
    return this;
  }

   /**
   * Accumulated precipitation since last forecast point. Default (mm)
   * @return precip
  **/
  @Schema(example = "1.1", description = "Accumulated precipitation since last forecast point. Default (mm)")
  public BigDecimal getPrecip() {
    return precip;
  }

  public void setPrecip(BigDecimal precip) {
    this.precip = precip;
  }

  public ForecastHour temp(BigDecimal temp) {
    this.temp = temp;
    return this;
  }

   /**
   * Temperature - Default (C)
   * @return temp
  **/
  @Schema(example = "-1.5", description = "Temperature - Default (C)")
  public BigDecimal getTemp() {
    return temp;
  }

  public void setTemp(BigDecimal temp) {
    this.temp = temp;
  }

  public ForecastHour dewpt(BigDecimal dewpt) {
    this.dewpt = dewpt;
    return this;
  }

   /**
   * Dewpoint - Default (C)
   * @return dewpt
  **/
  @Schema(example = "-4.0", description = "Dewpoint - Default (C)")
  public BigDecimal getDewpt() {
    return dewpt;
  }

  public void setDewpt(BigDecimal dewpt) {
    this.dewpt = dewpt;
  }

  public ForecastHour appTemp(BigDecimal appTemp) {
    this.appTemp = appTemp;
    return this;
  }

   /**
   * Apparent Temperature - Default (C)
   * @return appTemp
  **/
  @Schema(example = "4.5", description = "Apparent Temperature - Default (C)")
  public BigDecimal getAppTemp() {
    return appTemp;
  }

  public void setAppTemp(BigDecimal appTemp) {
    this.appTemp = appTemp;
  }

  public ForecastHour rh(Integer rh) {
    this.rh = rh;
    return this;
  }

   /**
   * Relative Humidity as a percentage (%)
   * @return rh
  **/
  @Schema(example = "95", description = "Relative Humidity as a percentage (%)")
  public Integer getRh() {
    return rh;
  }

  public void setRh(Integer rh) {
    this.rh = rh;
  }

  public ForecastHour clouds(Integer clouds) {
    this.clouds = clouds;
    return this;
  }

   /**
   * Cloud cover as a percentage (%)
   * @return clouds
  **/
  @Schema(example = "100", description = "Cloud cover as a percentage (%)")
  public Integer getClouds() {
    return clouds;
  }

  public void setClouds(Integer clouds) {
    this.clouds = clouds;
  }

  public ForecastHour weather(Weather weather) {
    this.weather = weather;
    return this;
  }

   /**
   * Get weather
   * @return weather
  **/
  @Schema(description = "")
  public Weather getWeather() {
    return weather;
  }

  public void setWeather(Weather weather) {
    this.weather = weather;
  }

  public ForecastHour slp(BigDecimal slp) {
    this.slp = slp;
    return this;
  }

   /**
   * Mean Sea level pressure (mb)
   * @return slp
  **/
  @Schema(example = "1012.89", description = "Mean Sea level pressure (mb)")
  public BigDecimal getSlp() {
    return slp;
  }

  public void setSlp(BigDecimal slp) {
    this.slp = slp;
  }

  public ForecastHour pres(BigDecimal pres) {
    this.pres = pres;
    return this;
  }

   /**
   * Pressure (mb)
   * @return pres
  **/
  @Schema(example = "1005.0", description = "Pressure (mb)")
  public BigDecimal getPres() {
    return pres;
  }

  public void setPres(BigDecimal pres) {
    this.pres = pres;
  }

  public ForecastHour uv(BigDecimal uv) {
    this.uv = uv;
    return this;
  }

   /**
   * UV Index
   * @return uv
  **/
  @Schema(example = "6.5", description = "UV Index")
  public BigDecimal getUv() {
    return uv;
  }

  public void setUv(BigDecimal uv) {
    this.uv = uv;
  }

  public ForecastHour solarRad(BigDecimal solarRad) {
    this.solarRad = solarRad;
    return this;
  }

   /**
   * Estimated solar radiation (W/m^2)
   * @return solarRad
  **/
  @Schema(example = "300.0", description = "Estimated solar radiation (W/m^2)")
  public BigDecimal getSolarRad() {
    return solarRad;
  }

  public void setSolarRad(BigDecimal solarRad) {
    this.solarRad = solarRad;
  }

  public ForecastHour ghi(BigDecimal ghi) {
    this.ghi = ghi;
    return this;
  }

   /**
   * Global horizontal solar irradiance (W/m^2)
   * @return ghi
  **/
  @Schema(example = "1000.0", description = "Global horizontal solar irradiance (W/m^2)")
  public BigDecimal getGhi() {
    return ghi;
  }

  public void setGhi(BigDecimal ghi) {
    this.ghi = ghi;
  }

  public ForecastHour dhi(BigDecimal dhi) {
    this.dhi = dhi;
    return this;
  }

   /**
   * Diffuse normal solar irradiance (W/m^2)
   * @return dhi
  **/
  @Schema(example = "200.0", description = "Diffuse normal solar irradiance (W/m^2)")
  public BigDecimal getDhi() {
    return dhi;
  }

  public void setDhi(BigDecimal dhi) {
    this.dhi = dhi;
  }

  public ForecastHour dni(BigDecimal dni) {
    this.dni = dni;
    return this;
  }

   /**
   * Direct normal solar irradiance (W/m^2)
   * @return dni
  **/
  @Schema(example = "400.0", description = "Direct normal solar irradiance (W/m^2)")
  public BigDecimal getDni() {
    return dni;
  }

  public void setDni(BigDecimal dni) {
    this.dni = dni;
  }

  public ForecastHour vis(BigDecimal vis) {
    this.vis = vis;
    return this;
  }

   /**
   * Visibility - Default (KM)
   * @return vis
  **/
  @Schema(example = "1.0", description = "Visibility - Default (KM)")
  public BigDecimal getVis() {
    return vis;
  }

  public void setVis(BigDecimal vis) {
    this.vis = vis;
  }

  public ForecastHour pod(String pod) {
    this.pod = pod;
    return this;
  }

   /**
   * Part of day (d &#x3D; day, n &#x3D; night)
   * @return pod
  **/
  @Schema(example = "d", description = "Part of day (d = day, n = night)")
  public String getPod() {
    return pod;
  }

  public void setPod(String pod) {
    this.pod = pod;
  }

  public ForecastHour pop(BigDecimal pop) {
    this.pop = pop;
    return this;
  }

   /**
   * Chance of Precipitation as a percentage (%)
   * @return pop
  **/
  @Schema(example = "75.0", description = "Chance of Precipitation as a percentage (%)")
  public BigDecimal getPop() {
    return pop;
  }

  public void setPop(BigDecimal pop) {
    this.pop = pop;
  }

  public ForecastHour windSpd(BigDecimal windSpd) {
    this.windSpd = windSpd;
    return this;
  }

   /**
   * Wind Speed - Default (m/s)
   * @return windSpd
  **/
  @Schema(example = "13.85", description = "Wind Speed - Default (m/s)")
  public BigDecimal getWindSpd() {
    return windSpd;
  }

  public void setWindSpd(BigDecimal windSpd) {
    this.windSpd = windSpd;
  }

  public ForecastHour windDir(Integer windDir) {
    this.windDir = windDir;
    return this;
  }

   /**
   * Wind direction
   * @return windDir
  **/
  @Schema(example = "105", description = "Wind direction")
  public Integer getWindDir() {
    return windDir;
  }

  public void setWindDir(Integer windDir) {
    this.windDir = windDir;
  }

  public ForecastHour windCdir(String windCdir) {
    this.windCdir = windCdir;
    return this;
  }

   /**
   * Cardinal wind direction
   * @return windCdir
  **/
  @Schema(example = "ENE", description = "Cardinal wind direction")
  public String getWindCdir() {
    return windCdir;
  }

  public void setWindCdir(String windCdir) {
    this.windCdir = windCdir;
  }

  public ForecastHour windCdirFull(String windCdirFull) {
    this.windCdirFull = windCdirFull;
    return this;
  }

   /**
   * Cardinal wind direction (text)
   * @return windCdirFull
  **/
  @Schema(example = "East-North-East", description = "Cardinal wind direction (text)")
  public String getWindCdirFull() {
    return windCdirFull;
  }

  public void setWindCdirFull(String windCdirFull) {
    this.windCdirFull = windCdirFull;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ForecastHour forecastHour = (ForecastHour) o;
    return Objects.equals(this.ts, forecastHour.ts) &&
        Objects.equals(this.timestampLocal, forecastHour.timestampLocal) &&
        Objects.equals(this.timestampUtc, forecastHour.timestampUtc) &&
        Objects.equals(this.datetime, forecastHour.datetime) &&
        Objects.equals(this.snow, forecastHour.snow) &&
        Objects.equals(this.snowDepth, forecastHour.snowDepth) &&
        Objects.equals(this.snow6h, forecastHour.snow6h) &&
        Objects.equals(this.precip, forecastHour.precip) &&
        Objects.equals(this.temp, forecastHour.temp) &&
        Objects.equals(this.dewpt, forecastHour.dewpt) &&
        Objects.equals(this.appTemp, forecastHour.appTemp) &&
        Objects.equals(this.rh, forecastHour.rh) &&
        Objects.equals(this.clouds, forecastHour.clouds) &&
        Objects.equals(this.weather, forecastHour.weather) &&
        Objects.equals(this.slp, forecastHour.slp) &&
        Objects.equals(this.pres, forecastHour.pres) &&
        Objects.equals(this.uv, forecastHour.uv) &&
        Objects.equals(this.solarRad, forecastHour.solarRad) &&
        Objects.equals(this.ghi, forecastHour.ghi) &&
        Objects.equals(this.dhi, forecastHour.dhi) &&
        Objects.equals(this.dni, forecastHour.dni) &&
        Objects.equals(this.vis, forecastHour.vis) &&
        Objects.equals(this.pod, forecastHour.pod) &&
        Objects.equals(this.pop, forecastHour.pop) &&
        Objects.equals(this.windSpd, forecastHour.windSpd) &&
        Objects.equals(this.windDir, forecastHour.windDir) &&
        Objects.equals(this.windCdir, forecastHour.windCdir) &&
        Objects.equals(this.windCdirFull, forecastHour.windCdirFull);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ts, timestampLocal, timestampUtc, datetime, snow, snowDepth, snow6h, precip, temp, dewpt, appTemp, rh, clouds, weather, slp, pres, uv, solarRad, ghi, dhi, dni, vis, pod, pop, windSpd, windDir, windCdir, windCdirFull);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ForecastHour {\n");
    
    sb.append("    ts: ").append(toIndentedString(ts)).append("\n");
    sb.append("    timestampLocal: ").append(toIndentedString(timestampLocal)).append("\n");
    sb.append("    timestampUtc: ").append(toIndentedString(timestampUtc)).append("\n");
    sb.append("    datetime: ").append(toIndentedString(datetime)).append("\n");
    sb.append("    snow: ").append(toIndentedString(snow)).append("\n");
    sb.append("    snowDepth: ").append(toIndentedString(snowDepth)).append("\n");
    sb.append("    snow6h: ").append(toIndentedString(snow6h)).append("\n");
    sb.append("    precip: ").append(toIndentedString(precip)).append("\n");
    sb.append("    temp: ").append(toIndentedString(temp)).append("\n");
    sb.append("    dewpt: ").append(toIndentedString(dewpt)).append("\n");
    sb.append("    appTemp: ").append(toIndentedString(appTemp)).append("\n");
    sb.append("    rh: ").append(toIndentedString(rh)).append("\n");
    sb.append("    clouds: ").append(toIndentedString(clouds)).append("\n");
    sb.append("    weather: ").append(toIndentedString(weather)).append("\n");
    sb.append("    slp: ").append(toIndentedString(slp)).append("\n");
    sb.append("    pres: ").append(toIndentedString(pres)).append("\n");
    sb.append("    uv: ").append(toIndentedString(uv)).append("\n");
    sb.append("    solarRad: ").append(toIndentedString(solarRad)).append("\n");
    sb.append("    ghi: ").append(toIndentedString(ghi)).append("\n");
    sb.append("    dhi: ").append(toIndentedString(dhi)).append("\n");
    sb.append("    dni: ").append(toIndentedString(dni)).append("\n");
    sb.append("    vis: ").append(toIndentedString(vis)).append("\n");
    sb.append("    pod: ").append(toIndentedString(pod)).append("\n");
    sb.append("    pop: ").append(toIndentedString(pop)).append("\n");
    sb.append("    windSpd: ").append(toIndentedString(windSpd)).append("\n");
    sb.append("    windDir: ").append(toIndentedString(windDir)).append("\n");
    sb.append("    windCdir: ").append(toIndentedString(windCdir)).append("\n");
    sb.append("    windCdirFull: ").append(toIndentedString(windCdirFull)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
